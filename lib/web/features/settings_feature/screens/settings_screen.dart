import 'package:doloooki/utils/palette.dart';
import 'package:doloooki/utils/text_styles.dart';
import 'package:doloooki/utils/responsive_utils.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:image_picker/image_picker.dart';
import 'package:doloooki/web/core/presentation/left_navigation/controllers/left_navigation_controller.dart';

class SettingsController extends GetxController {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  final TextEditingController nameController = TextEditingController();
  final TextEditingController surnameController = TextEditingController();
  final TextEditingController patronymicController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController descriptionController = TextEditingController();
  final TextEditingController shortDescriptionController = TextEditingController();
  
  final RxBool isLoading = true.obs;
  final RxString photoUrl = ''.obs;
  final RxString error = ''.obs;
  
  @override
  void onInit() {
    super.onInit();
    loadStylistData();
  }
  
  @override
  void onClose() {
    nameController.dispose();
    surnameController.dispose();
    patronymicController.dispose();
    emailController.dispose();
    descriptionController.dispose();
    shortDescriptionController.dispose();
    super.onClose();
  }
  
  Future<void> loadStylistData() async {
    try {
      isLoading.value = true;
      error.value = '';
      
      final currentUser = _auth.currentUser;
      if (currentUser == null) {
        error.value = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
        return;
      }
      
      print('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∞: ${currentUser.uid}');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ stylists
      final stylistDoc = await _firestore
          .collection('stylists')
          .doc(currentUser.uid)
          .get();
      
      if (stylistDoc.exists) {
        final data = stylistDoc.data() as Map<String, dynamic>;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        nameController.text = data['name'] ?? '';
        surnameController.text = data['surname'] ?? '';
        patronymicController.text = data['patronymic'] ?? data['secondName'] ?? '';
        emailController.text = currentUser.email ?? '';
        descriptionController.text = data['description'] ?? '';
        shortDescriptionController.text = data['shortDescription'] ?? '';
        photoUrl.value = data['profileImage'] ?? data['profileImageUrl'] ?? '';
        
        print('‚úÖ –î–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${data['name']} ${data['surname']}');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–µ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        try {
          final leftNavController = Get.find<LeftNavigationController>();
          leftNavController.refreshStylistData();
        } catch (e) {
          // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
          print('LeftNavigationController not found: $e');
        }
      } else {
        print('‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç —Å—Ç–∏–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å');
        
        // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await _createStylistRecord();
      }
      
    } catch (e) {
      error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e';
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–∏—Å—Ç–∞: $e');
    } finally {
      isLoading.value = false;
    }
  }
  
  Future<void> _createStylistRecord() async {
    try {
      final currentUser = _auth.currentUser;
      if (currentUser == null) return;
      
      final basicData = {
        'name': '',
        'surname': '',
        'patronymic': '',
        'email': currentUser.email ?? '',
        'description': '',
        'shortDescription': '',
        'profileImage': '',
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      };
      
      await _firestore
          .collection('stylists')
          .doc(currentUser.uid)
          .set(basicData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      emailController.text = currentUser.email ?? '';
      
      print('‚úÖ –ë–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å—Ç–∏–ª–∏—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∏–ª–∏—Å—Ç–∞: $e');
    }
  }
  
  Future<void> updateProfilePhoto() async {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ñ–æ—Ç–æ
      final result = await Get.dialog<String>(
        AlertDialog(
          backgroundColor: Palette.red500,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          title: Text(
            '–û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è',
            style: TextStyles.titleMedium.copyWith(color: Palette.white100),
          ),
          content: Text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è',
            style: TextStyles.bodyMedium.copyWith(color: Palette.grey350),
          ),
          actions: [
            TextButton(
              onPressed: () => Get.back(),
              child: Text(
                '–û—Ç–º–µ–Ω–∞',
                style: TextStyles.bodyMedium.copyWith(color: Palette.grey350),
              ),
            ),
            ElevatedButton(
              onPressed: () => Get.back(result: 'gallery'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Palette.red100,
                foregroundColor: Palette.white100,
              ),
              child: Text(
                '–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ',
                style: TextStyles.bodyMedium.copyWith(color: Palette.white100),
              ),
            ),
          ],
        ),
      );

      if (result == 'gallery') {
        await _pickAndUploadImage();
      }
      
    } catch (e) {
      Get.snackbar(
        '–û—à–∏–±–∫–∞',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ: $e',
        backgroundColor: Palette.error,
        colorText: Palette.white100,
        duration: Duration(seconds: 3),
      );
      
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: $e');
    }
  }

  Future<void> _pickAndUploadImage() async {
    try {
      final currentUser = _auth.currentUser;
      if (currentUser == null) {
        Get.snackbar(
          '–û—à–∏–±–∫–∞',
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
          backgroundColor: Palette.error,
          colorText: Palette.white100,
        );
        return;
      }

      // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      final ImagePicker picker = ImagePicker();
      final XFile? image = await picker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 800,
        maxHeight: 800,
        imageQuality: 85,
      );

      if (image == null) return;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      Get.dialog(
        AlertDialog(
          backgroundColor: Palette.red500,
          content: Container(
            height: 100,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CircularProgressIndicator(color: Palette.white100),
                SizedBox(height: 16),
                Text(
                  '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ...',
                  style: TextStyles.bodyMedium.copyWith(color: Palette.white100),
                ),
              ],
            ),
          ),
        ),
        barrierDismissible: false,
      );

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      final bytes = await image.readAsBytes();

      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Firebase Storage
      final storageRef = FirebaseStorage.instance
          .ref()
          .child('stylists')
          .child('profile_images')
          .child('${currentUser.uid}.jpg');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      final uploadTask = storageRef.putData(
        bytes,
        SettableMetadata(contentType: 'image/jpeg'),
      );

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      final snapshot = await uploadTask;
      final downloadUrl = await snapshot.ref.getDownloadURL();

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å—Ç–∏–ª–∏—Å—Ç–∞ –≤ Firestore
      await _firestore
          .collection('stylists')
          .doc(currentUser.uid)
          .update({
        'profileImage': downloadUrl,
        'updatedAt': FieldValue.serverTimestamp(),
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      photoUrl.value = downloadUrl;

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
      Get.back();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      Get.snackbar(
        '–£—Å–ø–µ—Ö',
        '–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
        backgroundColor: Palette.success,
        colorText: Palette.white100,
        duration: Duration(seconds: 2),
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–µ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      try {
        final leftNavController = Get.find<LeftNavigationController>();
        leftNavController.refreshStylistData();
      } catch (e) {
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        print('LeftNavigationController not found: $e');
      }

      print('‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: $downloadUrl');

    } catch (e) {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
      if (Get.isDialogOpen == true) {
        Get.back();
      }

      Get.snackbar(
        '–û—à–∏–±–∫–∞',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ: $e',
        backgroundColor: Palette.error,
        colorText: Palette.white100,
        duration: Duration(seconds: 3),
      );

      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: $e');
    }
  }
}

class SettingsScreen extends StatelessWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final controller = Get.put(SettingsController());
    
    return Container(
      
      color: Colors.transparent,
      padding: EdgeInsets.all(ResponsiveUtils.containerSize(20.sp)),
      child: Obx(() {
        if (controller.isLoading.value) {
          return Center(
            child: CircularProgressIndicator(color: Palette.white100),
          );
        }
        
        if (controller.error.value.isNotEmpty) {
          return Center(
            child: Column(

              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(Icons.error_outline, color: Palette.error, size: 48),
                SizedBox(height: 16),
                Text(
                  controller.error.value,
                  style: TextStyles.bodyMedium.copyWith(color: Palette.error),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () => controller.loadStylistData(),
                  child: Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
                ),
              ],
            ),
          );
        }
        
        return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [

              // –ó–∞–≥–æ–ª–æ–≤–æ–∫
              Text(
                '–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞',
                style: TextStyles.headlineSmall.copyWith(color: Palette.white100),
              ),
              SizedBox(height: ResponsiveUtils.containerSize(8.h)),
              Text(
                '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ',
                style: TextStyles.bodyMedium.copyWith(color: Palette.grey350),
              ),
              
              SizedBox(height: ResponsiveUtils.containerSize(32.h)),
              
              // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
              Expanded(
                child:  Container(
                    constraints: BoxConstraints(
                      maxWidth: MediaQuery.of(context).size.width * 0.5, // –ü–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
                      maxHeight: MediaQuery.of(context).size.height * 0.8, // 80% –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
                    ),
                    child: SingleChildScrollView(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:',
                            style: TextStyles.titleMedium.copyWith(color: Palette.white100),
                          ),
                          SizedBox(height: ResponsiveUtils.containerSize(12.h)),
                          
                          // –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                          Container(
                            width: ResponsiveUtils.containerSize(100.w),
                            height: ResponsiveUtils.containerSize(100.w), // –î–µ–ª–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(ResponsiveUtils.containerSize(12.r)),
                              color: Palette.red500,
                            ),
                            child: Stack(
                              children: [
                                // –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(ResponsiveUtils.containerSize(12.r)),
                                  child: Container(
                                    width: double.infinity,
                                    height: double.infinity,
                                    color: Palette.grey350,
                                    child: controller.photoUrl.value.isNotEmpty
                                        ? Image.network(
                                            controller.photoUrl.value,
                                            fit: BoxFit.cover,
                                            errorBuilder: (context, error, stackTrace) {
                                              return Icon(
                                                Icons.person,
                                                color: Palette.white100,
                                                size: ResponsiveUtils.containerSize(48.sp),
                                              );
                                            },
                                          )
                                        : Icon(
                                            Icons.person,
                                            color: Palette.white100,
                                            size: ResponsiveUtils.containerSize(48.sp),
                                          ),
                                  ),
                                ),
                                
                                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞
                                Positioned(
                                  bottom: ResponsiveUtils.containerSize(5.h),
                                  right: ResponsiveUtils.containerSize(5.w),
                                  child: GestureDetector(
                                    onTap: () => controller.updateProfilePhoto(),
                                    child: Container(
                                      width: ResponsiveUtils.containerSize(30.w),
                                      height: ResponsiveUtils.containerSize(30.w), // –î–µ–ª–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π
                                      decoration: BoxDecoration(
                                        color: Palette.red100,
                                        shape: BoxShape.circle,
                                      ),
                                      child: Icon(
                                        Icons.edit,
                                        color: Palette.white100,
                                        size: ResponsiveUtils.containerSize(18.sp),
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          
                          SizedBox(height: ResponsiveUtils.containerSize(24.h)),
                          
                          // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏
                          Container(
                            padding: EdgeInsets.all(ResponsiveUtils.containerSize(20.sp)),
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(ResponsiveUtils.containerSize(20.r)),
                              border: Border.all(color: Palette.grey350, width: 1),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                // –ü–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É
                                Column(
                                  children: [
                                    // –ò–º—è
                                    _buildDataField(
                                      label: '–ò–º—è',
                                      controller: controller.nameController,
                                      isEditing: false,
                                    ),
                                    
                                    SizedBox(height: ResponsiveUtils.containerSize(16.h)),
                                    
                                    // –§–∞–º–∏–ª–∏—è
                                    _buildDataField(
                                      label: '–§–∞–º–∏–ª–∏—è',
                                      controller: controller.surnameController,
                                      isEditing: false,
                                    ),
                                    
                                    SizedBox(height: ResponsiveUtils.containerSize(16.h)),
                                    
                                    // –û—Ç—á–µ—Å—Ç–≤–æ
                                    _buildDataField(
                                      label: '–û—Ç—á–µ—Å—Ç–≤–æ',
                                      controller: controller.patronymicController,
                                      isEditing: false,
                                    ),
                                    
                                    SizedBox(height: ResponsiveUtils.containerSize(16.h)),
                                    
                                    // E-mail
                                    _buildDataField(
                                      label: 'E-mail',
                                      controller: controller.emailController,
                                      isEditing: false, // Email –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                      keyboardType: TextInputType.emailAddress,
                                    ),
                                    
                                    SizedBox(height: ResponsiveUtils.containerSize(16.h)),
                                    
                                    // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                                    _buildDataField(
                                      label: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
                                      controller: controller.shortDescriptionController,
                                      isEditing: false,
                                      maxLines: 2,
                                    ),
                                    
                                    SizedBox(height: ResponsiveUtils.containerSize(16.h)),
                                    
                                    // –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                                    _buildDataField(
                                      label: '–û–ø–∏—Å–∞–Ω–∏–µ',
                                      controller: controller.descriptionController,
                                      isEditing: false,
                                      maxLines: 4,
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              
            ],
          );
        
      }),
    );
  }
  
  Widget _buildDataField({
    required String label,
    required TextEditingController controller,
    required bool isEditing,
    TextInputType? keyboardType,
    int? maxLines,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: TextStyles.bodyMedium.copyWith(color: Palette.grey350),
        ),
        SizedBox(height: ResponsiveUtils.containerSize(8.h)),
        
        Container(
          decoration: BoxDecoration(
            color: Palette.red500,
            borderRadius: BorderRadius.circular(ResponsiveUtils.containerSize(12.r)),
            border: isEditing ? Border.all(color: Palette.red200, width: 1) : null,
          ),
          child: TextField(
            controller: controller,
            enabled: isEditing,
            keyboardType: keyboardType,
            style: TextStyles.bodyLarge.copyWith(
              color: isEditing ? Palette.white100 : Palette.grey200,
            ),
            decoration: InputDecoration(
              border: InputBorder.none,
              contentPadding: EdgeInsets.symmetric(
                horizontal: ResponsiveUtils.containerSize(16.w),
                vertical: ResponsiveUtils.containerSize(14.h),
              ),
              hintStyle: TextStyles.bodyLarge.copyWith(color: Palette.grey350),
            ),
            cursorColor: Palette.white100,
            maxLines: maxLines,
          ),
        ),
      ],
    );
  }
}