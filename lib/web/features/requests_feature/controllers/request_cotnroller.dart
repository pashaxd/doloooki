import 'package:get/get.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:image_picker/image_picker.dart';
import 'package:flutter/material.dart';
import 'dart:io';
import 'package:doloooki/mobile/features/stylist_feature/data/models/request_model.dart';
import 'package:doloooki/mobile/features/stylist_feature/data/models/message_model.dart';
import 'package:doloooki/mobile/features/stylist_feature/data/services/chat_service.dart';
import 'package:doloooki/utils/palette.dart';

class RequestController extends GetxController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseStorage _storage = FirebaseStorage.instance;
  final ChatService _chatService = ChatService();
  
  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å—Ç–∏–ª–∏—Å—Ç–∞
  final RxList<RequestModel> requests = <RequestModel>[].obs;
  final RxBool isLoading = false.obs;
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  final RxMap<String, Map<String, dynamic>> usersData = <String, Map<String, dynamic>>{}.obs;
  
  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞
  final RxList<MessageModel> messages = <MessageModel>[].obs;
  final TextEditingController messageController = TextEditingController();
  final ScrollController scrollController = ScrollController();
  final RxBool isSending = false.obs;
  final Rx<RequestModel?> currentRequest = Rx<RequestModel?>(null);
  
  @override
  void onInit() {
    super.onInit();
    loadStylistRequests();
  }
  
  @override
  void onClose() {
    messageController.dispose();
    scrollController.dispose();
    super.onClose();
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∏–ª–∏—Å—Ç–∞
  Future<void> loadStylistRequests() async {
    try {
      isLoading.value = true;
      final user = _auth.currentUser;
      if (user == null) return;
      
      print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∏–ª–∏—Å—Ç–∞: ${user.uid}');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—Ç–∏–ª–∏—Å—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      final querySnapshot = await _firestore
          .collection('stylists')
          .doc(user.uid)
          .collection('requests')
          .orderBy('createdAt', descending: true)
          .get();
      
      print('üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ${querySnapshot.docs.length}');
      
      requests.value = querySnapshot.docs.map((doc) {
        try {
          final data = doc.data();
          return RequestModel.fromMap(data, doc.id);
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞ ${doc.id}: $e');
          return null;
        }
      }).where((request) => request != null).cast<RequestModel>().toList();
      
      print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ${requests.length}');
      
      // –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
      await _loadUsersData();
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: $e');
      Get.snackbar(
        '–û—à–∏–±–∫–∞',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: $e',
        backgroundColor: Palette.error,
        colorText: Palette.white100,
      );
    } finally {
      isLoading.value = false;
    }
  }
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> _loadUsersData() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ userId –∏–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
      final userIds = requests.map((request) => request.userId).toSet();
      
      print('üë• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userIds.length}');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (final userId in userIds) {
        try {
          final userDoc = await _firestore.collection('users').doc(userId).get();
          if (userDoc.exists) {
            usersData[userId] = userDoc.data()!;
            print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userDoc.data()?['name'] ?? '–ë–µ–∑ –∏–º–µ–Ω–∏'}');
          } else {
            usersData[userId] = {'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'};
          }
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId: $e');
          usersData[userId] = {'name': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'};
        }
      }
      
      print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ ${usersData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
    }
  }
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String getUserName(String userId) {
    final userData = usersData[userId];
    return userData?['name'] ?? '–ó–∞–≥—Ä—É–∑–∫–∞...';
  }
  String getUserImage(String userId) {
    final userData = usersData[userId];
    return userData?['profileImage'] ?? '';
  }
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
  void loadMessages(RequestModel request) {
    currentRequest.value = request;
    print('üí¨ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: ${request.id}');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∏–ª–∏—Å—Ç–∞
    _getStylistChatMessages(request.id).listen((messageList) {
      final wasEmpty = messages.isEmpty;
      messages.value = messageList;
      print('üì® –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageList.length}');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ (—Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
      // –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (scrollController.hasClients) {
          if (wasEmpty && messageList.isNotEmpty) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –° reverse: true, –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω—É–∂–Ω–æ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫ –º–∞–∫—Å–∏–º—É–º—É
            scrollController.animateTo(
              scrollController.position.maxScrollExtent,
              duration: const Duration(milliseconds: 300),
              curve: Curves.easeOut,
            );
          } else if (!wasEmpty) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –° reverse: true, –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –º–∏–Ω–∏–º—É–º—É
            scrollController.animateTo(
              scrollController.position.minScrollExtent,
              duration: const Duration(milliseconds: 300),
              curve: Curves.easeOut,
            );
          }
        }
      });
    }, onError: (error) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: $error');
    });
  }
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ —Å—Ç–∏–ª–∏—Å—Ç–∞
  Stream<List<MessageModel>> _getStylistChatMessages(String chatId) {
    final user = _auth.currentUser;
    if (user == null) return Stream.value([]);

    return _firestore
        .collection('stylists')
        .doc(user.uid)
        .collection('chats')
        .doc(chatId)
        .collection('messages')
        .snapshots()
        .map((snapshot) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      final messages = snapshot.docs.map((doc) {
        return MessageModel.fromMap(doc.data(), doc.id);
      }).toList();
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º DateTime (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      messages.sort((a, b) {
        try {
          final dateA = DateTime.parse(a.createdAt);
          final dateB = DateTime.parse(b.createdAt);
          return dateA.compareTo(dateB);
        } catch (e) {
          print('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: $e');
          return a.createdAt.compareTo(b.createdAt);
        }
      });
      
      return messages;
    });
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<void> sendMessage() async {
    final content = messageController.text.trim();
    if (content.isEmpty || isSending.value || currentRequest.value == null) return;
    
    try {
      isSending.value = true;
      final request = currentRequest.value!;
      messageController.clear();
      
      print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: ${request.id}');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∏–ª–∏—Å—Ç–∞
      await _sendStylistTextMessage(
        chatId: request.id,
        content: content,
        userId: request.userId,
      );
      
      print('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      Get.snackbar(
        '–û—à–∏–±–∫–∞',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
        backgroundColor: Palette.error,
        colorText: Palette.white100,
      );
    } finally {
      isSending.value = false;
    }
  }
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∏–ª–∏—Å—Ç–æ–º
  Future<void> _sendStylistTextMessage({
    required String chatId,
    required String content,
    required String userId,
  }) async {
    try {
      final user = _auth.currentUser;
      if (user == null) return;

      final message = MessageModel(
        id: '',
        chatId: chatId,
        senderId: user.uid,
        senderName: '–°—Ç–∏–ª–∏—Å—Ç',
        content: content,
        type: 'text',
        createdAt: DateTime.now().toIso8601String(),
        metadata: null,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å—Ç–∏–ª–∏—Å—Ç–∞
      await _firestore
          .collection('stylists')
          .doc(user.uid)
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .add(message.toMap());

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await _firestore
          .collection('users')
          .doc(userId)
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .add(message.toMap());

    } catch (e) {
      print('Error sending stylist message: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  Future<void> sendImage() async {
    if (currentRequest.value == null) return;
    
    try {
      final picker = ImagePicker();
      final XFile? image = await picker.pickImage(source: ImageSource.gallery);
      
      if (image != null) {
        isSending.value = true;
        final request = currentRequest.value!;
        
        print('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç: ${request.id}');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Firebase Storage –¥–ª—è –≤–µ–±–∞
        final imageUrl = await _uploadImageToFirebaseWeb(image, request.id);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∏–ª–∏—Å—Ç–∞
        await _sendStylistImageMessage(
          chatId: request.id,
          imageUrl: imageUrl,
          userId: request.userId,
        );
        
        print('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
      Get.snackbar(
        '–û—à–∏–±–∫–∞',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        backgroundColor: Palette.error,
        colorText: Palette.white100,
      );
    } finally {
      isSending.value = false;
    }
  }
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª–∏—Å—Ç–æ–º
  Future<void> _sendStylistImageMessage({
    required String chatId,
    required String imageUrl,
    required String userId,
  }) async {
    try {
      final user = _auth.currentUser;
      if (user == null) return;

      final message = MessageModel(
        id: '',
        chatId: chatId,
        senderId: user.uid,
        senderName: '–°—Ç–∏–ª–∏—Å—Ç',
        content: imageUrl,
        type: 'image',
        createdAt: DateTime.now().toIso8601String(),
        metadata: null,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å—Ç–∏–ª–∏—Å—Ç–∞
      await _firestore
          .collection('stylists')
          .doc(user.uid)
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .add(message.toMap());

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await _firestore
          .collection('users')
          .doc(userId)
          .collection('chats')
          .doc(chatId)
          .collection('messages')
          .add(message.toMap());

    } catch (e) {
      print('Error sending stylist image: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
  }
  
  // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–≤ (–¥–ª—è –≤–µ–±–∞)
  Future<void> pickImageFromFiles() async {
    if (currentRequest.value == null) return;
    
    try {
      final picker = ImagePicker();
      final XFile? image = await picker.pickImage(source: ImageSource.gallery);
      
      if (image != null) {
        isSending.value = true;
        final request = currentRequest.value!;
        
        print('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Ç: ${request.id}');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Firebase Storage –¥–ª—è –≤–µ–±–∞
        final imageUrl = await _uploadImageToFirebaseWeb(image, request.id);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∏–ª–∏—Å—Ç–∞
        await _sendStylistImageMessage(
          chatId: request.id,
          imageUrl: imageUrl,
          userId: request.userId,
        );
        
        print('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤: $e');
      Get.snackbar(
        '–û—à–∏–±–∫–∞',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        backgroundColor: Palette.error,
        colorText: Palette.white100,
      );
    } finally {
      isSending.value = false;
    }
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Firebase Storage –¥–ª—è –≤–µ–±–∞
  Future<String> _uploadImageToFirebaseWeb(XFile image, String chatId) async {
    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      final fileName = '${DateTime.now().millisecondsSinceEpoch}_${image.name}';
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Storage
      final storageRef = _storage.ref().child('chats/$chatId/images/$fileName');
      
      // –î–ª—è –≤–µ–±–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º bytes –≤–º–µ—Å—Ç–æ File
      final bytes = await image.readAsBytes();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      final uploadTask = await storageRef.putData(
        bytes,
        SettableMetadata(contentType: 'image/jpeg'),
      );
      
      // –ü–æ–ª—É—á–∞–µ–º URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      final downloadUrl = await uploadTask.ref.getDownloadURL();
      
      return downloadUrl;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±–∞: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $e');
    }
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Firebase Storage (–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
  Future<String> _uploadImageToFirebase(XFile image, String chatId) async {
    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      final fileName = '${DateTime.now().millisecondsSinceEpoch}_${image.name}';
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Storage
      final storageRef = _storage.ref().child('chats/$chatId/images/$fileName');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      final uploadTask = await storageRef.putFile(File(image.path));
      
      // –ü–æ–ª—É—á–∞–µ–º URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      final downloadUrl = await uploadTask.ref.getDownloadURL();
      
      return downloadUrl;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $e');
    }
  }
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
  Future<void> finishConsultation(String requestId) async {
    try {
      isLoading.value = true;
      final user = _auth.currentUser;
      if (user == null) return;
      
      print('üèÅ –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: $requestId');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—Ç–∏–ª–∏—Å—Ç–∞
      final requestDoc = await _firestore
          .collection('stylists')
          .doc(user.uid)
          .collection('requests')
          .doc(requestId)
          .get();

      if (!requestDoc.exists) return;
      
      final requestData = requestDoc.data()!;
      final userId = requestData['userId'];

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—Ç–∏–ª–∏—Å—Ç–∞
      await _firestore
          .collection('stylists')
          .doc(user.uid)
          .collection('requests')
          .doc(requestId)
          .update({'status': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'});

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await _firestore
          .collection('users')
          .doc(userId)
          .collection('requests')
          .doc(requestId)
          .update({'status': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'});
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      final index = requests.indexWhere((r) => r.id == requestId);
      if (index != -1) {
        final updatedRequest = requests[index].copyWith(status: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞');
        requests[index] = updatedRequest;
        requests.refresh();
      }
      
      print('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
      Get.snackbar(
        '–£—Å–ø–µ—à–Ω–æ',
        '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        backgroundColor: Palette.success,
        colorText: Palette.white100,
      );
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: $e');
      Get.snackbar(
        '–û—à–∏–±–∫–∞',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: $e',
        backgroundColor: Palette.error,
        colorText: Palette.white100,
      );
    } finally {
      isLoading.value = false;
    }
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
  String formatMessageTime(String dateString) {
    try {
      DateTime date = DateTime.parse(dateString);
      return '${date.hour.toString().padLeft(2, '0')}:${date.minute.toString().padLeft(2, '0')}';
    } catch (e) {
      return '';
    }
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
  String formatMessageDate(String dateString) {
    try {
      DateTime date = DateTime.parse(dateString);
      final months = [
        '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
        '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
      ];
      return '${date.day} ${months[date.month - 1]}';
    } catch (e) {
      return '';
    }
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
  String formatRequestDate(Timestamp timestamp) {
    try {
      final date = timestamp.toDate();
      final months = [
        '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
        '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
      ];
      return '${date.day} ${months[date.month - 1]}';
    } catch (e) {
      return '–ù–µ–¥–∞–≤–Ω–æ';
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
  Color getStatusColor(String status) {
    switch (status) {
      case '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
        return Palette.warning;
      case '–ó–∞–≤–µ—Ä—à–µ–Ω–∞':
        return Palette.success;
      case '–û—Ç–º–µ–Ω–µ–Ω–∞':
        return Palette.error;
      default:
        return Palette.warning;
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
  Future<void> refreshRequests() async {
    await loadStylistRequests();
  }
}