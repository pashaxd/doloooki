import 'package:get/get_state_manager/src/simple/get_controllers.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:doloooki/mobile/features/wardrobe_feature/models/clothes_item.dart';
import 'package:doloooki/mobile/features/patterns_feature/models/pattern_item.dart';
import 'package:get/get.dart';
import 'package:get/get_state_manager/src/simple/get_controllers.dart';

enum ViewMode { profile, wardrobe, patterns }

class UserInfoController extends GetxController {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å
  String? targetUserId;
  
  // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  final Rx<ViewMode> currentView = ViewMode.profile.obs;
  
  // –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  final Rx<Map<String, dynamic>?> userProfile = Rx<Map<String, dynamic>?>(null);
  final RxList<ClothesItem> recentClothes = <ClothesItem>[].obs;
  final RxList<ClothesItem> allClothes = <ClothesItem>[].obs; // –í—Å–µ –≤–µ—â–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  final RxList<PatternItem> recentPatterns = <PatternItem>[].obs;
  final RxList<PatternItem> allPatterns = <PatternItem>[].obs; // –í—Å–µ –æ–±—Ä–∞–∑—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  final RxInt totalClothes = 0.obs;
  final RxInt totalPatterns = 0.obs;
  final RxBool isLoading = true.obs;

  @override
  void onInit() {
    super.onInit();
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ
    final args = Get.arguments;
    if (args != null && args is Map && args.containsKey('userId')) {
      targetUserId = args['userId'];
      print('üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: $targetUserId');
    }
    
    loadUserData();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö
  void setTargetUser(String userId) {
    targetUserId = userId;
    print('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
    loadUserData();
  }

  Future<void> loadUserData() async {
    try {
      isLoading.value = true;
      
      print('üì± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      print('üéØ –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $targetUserId');
      
      if (targetUserId == null) {
        print('‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      final userDoc = await _firestore.collection('users').doc(targetUserId!).get();
      if (userDoc.exists) {
        userProfile.value = userDoc.data();
        print('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: ${userProfile.value?['name'] ?? '–ë–µ–∑ –∏–º–µ–Ω–∏'}');
      } else {
        print('‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        userProfile.value = null;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞—Ä–¥–µ—Ä–æ–±–∞
      print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–∞—Ä–¥–µ—Ä–æ–±...');
      final wardrobeSnapshot = await _firestore
          .collection('users')
          .doc(targetUserId!)
          .collection('wardrobe')
          .get();
      totalClothes.value = wardrobeSnapshot.docs.length;
      print('üëî –í—Å–µ–≥–æ –≤–µ—â–µ–π –≤ –≥–∞—Ä–¥–µ—Ä–æ–±–µ: ${totalClothes.value}');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—â–∏ (–º–∞–∫—Å–∏–º—É–º 8 –¥–ª—è –≤–µ–±)
      if (totalClothes.value > 0) {
        print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—â–∏...');
        final recentClothesSnapshot = await _firestore
            .collection('users')
            .doc(targetUserId!)
            .collection('wardrobe')
            .orderBy('createdAt', descending: true)
            .limit(8)
            .get();
        
        recentClothes.value = recentClothesSnapshot.docs
            .map((doc) {
              try {
                return ClothesItem.fromMap(doc.data());
              } catch (e) {
                print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ—â–∏ ${doc.id}: $e');
                return null;
              }
            })
            .where((item) => item != null)
            .cast<ClothesItem>()
            .toList();
        print('üëî –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—â–µ–π: ${recentClothes.length}');
      } else {
        recentClothes.clear();
        print('üì¶ –ì–∞—Ä–¥–µ—Ä–æ–± –ø—É—Å—Ç');
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–∑–æ–≤
      print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑—ã...');
      final patternsSnapshot = await _firestore
          .collection('users')
          .doc(targetUserId!)
          .collection('patterns')
          .get();
      totalPatterns.value = patternsSnapshot.docs.length;
      print('üé® –í—Å–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤: ${totalPatterns.value}');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–∑—ã (–º–∞–∫—Å–∏–º—É–º 8 –¥–ª—è –≤–µ–±)
      if (totalPatterns.value > 0) {
        print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–∑—ã...');
        final recentPatternsSnapshot = await _firestore
            .collection('users')
            .doc(targetUserId!)
            .collection('patterns')
            .orderBy('createdAt', descending: true)
            .limit(8)
            .get();
        
        recentPatterns.value = recentPatternsSnapshot.docs
            .map((doc) {
              try {
                return PatternItem.fromMap(doc.data());
              } catch (e) {
                print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—Ä–∞–∑–∞ ${doc.id}: $e');
                return null;
              }
            })
            .where((item) => item != null)
            .cast<PatternItem>()
            .toList();
        print('üé® –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–∑–æ–≤: ${recentPatterns.length}');
      } else {
        recentPatterns.clear();
        print('üé® –û–±—Ä–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }

      print('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      print('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${StackTrace.current}');
    } finally {
      isLoading.value = false;
      print('üèÅ –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–±—Ä–æ—à–µ–Ω');
    }
  }

  String getGreeting() {
    final hour = DateTime.now().hour;
    if (hour < 12) return '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ';
    if (hour < 17) return '–î–æ–±—Ä—ã–π –¥–µ–Ω—å';
    return '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä';
  }

  String formatDate(dynamic timestamp) {
    try {
      DateTime date;
      if (timestamp is Timestamp) {
        date = timestamp.toDate();
      } else if (timestamp is DateTime) {
        date = timestamp;
      } else {
        return '–ù–µ–¥–∞–≤–Ω–æ';
      }
      
      final now = DateTime.now();
      final difference = now.difference(date);
      
      if (difference.inDays == 0) {
        return '–°–µ–≥–æ–¥–Ω—è';
      } else if (difference.inDays == 1) {
        return '–í—á–µ—Ä–∞';
      } else if (difference.inDays < 7) {
        return '${difference.inDays} –¥–Ω. –Ω–∞–∑–∞–¥';
      } else {
        final months = [
          '—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω',
          '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'
        ];
        return '${date.day} ${months[date.month - 1]}';
      }
    } catch (e) {
      return '–ù–µ–¥–∞–≤–Ω–æ';
    }
  }

  String get userName {
    return userProfile.value?['name'] ?? 
           userProfile.value?['surname'] ?? 
           '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  }

  String get userFullName {
    final profile = userProfile.value;
    if (profile == null) return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    final parts = [
      profile['surname'],
      profile['name'], 
      profile['secondName']
    ].where((part) => part != null && part.toString().isNotEmpty).toList();
    
    return parts.isNotEmpty ? parts.join(' ') : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  }

  String? get userAvatar => userProfile.value?['profileImage'];

  void navigateToWardrobe() {
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É –≥–∞—Ä–¥–µ—Ä–æ–±–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print('üìÇ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–∞—Ä–¥–µ—Ä–æ–±—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $targetUserId');
    currentView.value = ViewMode.wardrobe;
    loadAllClothes();
  }

  void navigateToPatterns() {
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–∑–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print('üé® –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–∑–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $targetUserId');
    currentView.value = ViewMode.patterns;
    loadAllPatterns();
  }

  void backToProfile() {
    currentView.value = ViewMode.profile;
  }

  Future<void> loadAllClothes() async {
    try {
      isLoading.value = true;
      print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–µ—â–∏ –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞...');
      
      final clothesSnapshot = await _firestore
          .collection('users')
          .doc(targetUserId!)
          .collection('wardrobe')
          .orderBy('createdAt', descending: true)
          .get();
      
      allClothes.value = clothesSnapshot.docs
          .map((doc) {
            try {
              return ClothesItem.fromMap(doc.data());
            } catch (e) {
              print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ—â–∏ ${doc.id}: $e');
              return null;
            }
          })
          .where((item) => item != null)
          .cast<ClothesItem>()
          .toList();
      
      print('üëî –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ –≤–µ—â–µ–π: ${allClothes.length}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –≤–µ—â–µ–π: $e');
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> loadAllPatterns() async {
    try {
      isLoading.value = true;
      print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—ã...');
      
      final patternsSnapshot = await _firestore
          .collection('users')
          .doc(targetUserId!)
          .collection('patterns')
          .orderBy('createdAt', descending: true)
          .get();
      
      allPatterns.value = patternsSnapshot.docs
          .map((doc) {
            try {
              return PatternItem.fromMap(doc.data());
            } catch (e) {
              print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—Ä–∞–∑–∞ ${doc.id}: $e');
              return null;
            }
          })
          .where((item) => item != null)
          .cast<PatternItem>()
          .toList();
      
      print('üé® –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤: ${allPatterns.length}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤: $e');
    } finally {
      isLoading.value = false;
    }
  }

  int getGridColumns(int itemCount) {
    if (itemCount <= 4) return 4;
    if (itemCount <= 9) return 5;
    if (itemCount <= 16) return 6;
    if (itemCount <= 25) return 7;
    return 8;
  }

  Future<void> refreshData() async {
    await loadUserData();
  }
}