import 'dart:io';
import 'dart:typed_data';
import 'dart:convert';
import 'package:http/http.dart' as http;

class BackgroundRemovalService {
  static const String _apiUrl = 'https://api.pixian.ai/api/v2/remove-background';
  static const String _apiId = 'pxz3tapmwavcmsc'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API ID
  static const String _apiSecret = 'h1h94j9jssdd0n0sm5i39ln6cu7rdt297nd4qsk4gg6v9mknsd8g'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API Secret
  
  /// –£–¥–∞–ª—è–µ—Ç —Ñ–æ–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è API pixian.ai
  /// 
  /// [imageFile] - —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  /// [isTest] - —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º)
  /// 
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [Uint8List] —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  static Future<Uint8List?> removeBackground(File imageFile, {bool isTest = true}) async {
    try {
      print('üöÄ Starting background removal with pixian.ai API...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      final fileSizeBytes = await imageFile.length();
      final fileSizeMB = fileSizeBytes / (1024 * 1024);
      print('üìÅ Image file size: ${fileSizeMB.toStringAsFixed(2)} MB');
      
      if (fileSizeMB > 30) { // pixian.ai –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 30MB
        print('‚ùå File too large: ${fileSizeMB.toStringAsFixed(2)} MB (max 30 MB)');
        return null;
      }
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∞–π—Ç—ã
      final imageBytes = await imageFile.readAsBytes();
      print('üì∑ Image bytes length: ${imageBytes.length}');
      
      // –°–æ–∑–¥–∞–µ–º multipart –∑–∞–ø—Ä–æ—Å
      final request = http.MultipartRequest('POST', Uri.parse(_apiUrl));
      
      // –î–æ–±–∞–≤–ª—è–µ–º HTTP Basic Auth
      final credentials = base64Encode(utf8.encode('$_apiId:$_apiSecret'));
      request.headers['Authorization'] = 'Basic $credentials';
      
      print('üîë Using API ID: $_apiId');
      print('üåê API URL: $_apiUrl');
      print('üß™ Test mode: $isTest');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      request.files.add(
        http.MultipartFile.fromBytes(
          'image',
          imageBytes,
          filename: 'image.jpg',
        ),
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API
      request.fields['test'] = isTest.toString();
      request.fields['max_pixels'] = '5000000'; // 5 –º–µ–≥–∞–ø–∏–∫—Å–µ–ª–µ–π
      request.fields['output.format'] = 'png'; // PNG –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ —Ñ–æ–Ω–∞
      
      print('üì§ Sending request to pixian.ai API...');
      print('üìã Parameters: test=$isTest, max_pixels=5000000 (5MP), output.format=png');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      final streamedResponse = await request.send().timeout(
        Duration(seconds: 180), // pixian.ai —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç 180 —Å–µ–∫—É–Ω–¥
        onTimeout: () {
          throw Exception('Request timeout after 180 seconds');
        },
      );
      
      final response = await http.Response.fromStream(streamedResponse);
      
      print('üì• Response status: ${response.statusCode}');
      print('üìã Response headers: ${response.headers}');
      
      if (response.statusCode == 200) {
        // pixian.ai –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        final contentType = response.headers['content-type'] ?? '';
        print('üìÑ Content-Type: $contentType');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç pixian.ai
        if (response.headers.containsKey('x-credits-charged')) {
          print('üí∞ Credits charged: ${response.headers['x-credits-charged']}');
        }
        if (response.headers.containsKey('x-credits-calculated')) {
          print('üßÆ Credits calculated: ${response.headers['x-credits-calculated']}');
        }
        if (response.headers.containsKey('x-result-size')) {
          print('üìè Result size: ${response.headers['x-result-size']}');
        }
        
        if (contentType.startsWith('image/')) {
          print('‚úÖ Success! Image processed, size: ${response.bodyBytes.length} bytes');
          return response.bodyBytes;
        } else {
          print('‚ùå Unexpected content type: $contentType');
          print('üìÑ Response body: ${response.body}');
          return null;
        }
      } else {
        print('‚ùå API Error: ${response.statusCode}');
        print('üìÑ Response body: ${response.body}');
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫—É –æ—Ç pixian.ai
        try {
          final errorJson = json.decode(response.body);
          if (errorJson['error'] != null) {
            final error = errorJson['error'];
            print('üìã Error details:');
            print('   Status: ${error['status']}');
            print('   Code: ${error['code']}');
            print('   Message: ${error['message']}');
          }
        } catch (e) {
          print('üìÑ Raw error response: ${response.body}');
        }
        
        return null;
      }
    } catch (e) {
      print('üí• Background removal error: $e');
      print('üìç Error type: ${e.runtimeType}');
      return null;
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ pixian.ai
  static Future<Map<String, dynamic>?> checkAccountStatus() async {
    try {
      print('üîç Checking pixian.ai account status...');
      
      final credentials = base64Encode(utf8.encode('$_apiId:$_apiSecret'));
      
      final response = await http.get(
        Uri.parse('https://api.pixian.ai/api/v2/account'),
        headers: {
          'Authorization': 'Basic $credentials',
        },
      ).timeout(Duration(seconds: 10));
      
      print('üìä Account status response: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final accountData = json.decode(response.body);
        print('üìã Account info:');
        print('   Credit Pack: ${accountData['creditPack']}');
        print('   State: ${accountData['state']}');
        print('   Credits: ${accountData['credits']}');
        print('   Use Before: ${accountData['useBefore']}');
        
        return accountData;
      } else {
        print('‚ùå Account status check failed: ${response.statusCode}');
        print('üìÑ Response: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå Account status check failed: $e');
      return null;
    }
  }
  
  /// –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ pixian.ai API
  static Future<void> testApiConnection() async {
    try {
      print('üß™ Testing pixian.ai API connection...');
      print('üîë Using API ID: $_apiId');
      print('üåê API URL: $_apiUrl');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
      final accountStatus = await checkAccountStatus();
      
      if (accountStatus != null) {
        print('‚úÖ API connection successful!');
        print('üéØ Ready to process images');
        print('üí° Use test=true for free processing with watermark');
        print('üí∞ Use test=false for production quality (requires credits)');
      } else {
        print('‚ùå API connection failed - check credentials');
      }
      
    } catch (e) {
      print('üí• Test connection failed: $e');
    }
  }
} 