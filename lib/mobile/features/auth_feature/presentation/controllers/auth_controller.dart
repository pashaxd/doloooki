import 'package:doloooki/mobile/features/profile_feature/presentations/controllers/notifications_controller.dart';
import 'package:doloooki/mobile/features/subscription_feature/screens/subscription.dart';
import 'package:doloooki/mobile/features/auth_feature/presentation/screens/creating_profile.dart';
import 'package:doloooki/mobile/features/auth_feature/presentation/screens/sms.dart';
import 'package:doloooki/utils/text_styles.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:doloooki/core/presentation/ondoarding/screens/bottom_navigation.dart';

class AuthController extends GetxController {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final TextEditingController phoneController = TextEditingController();
  final List<TextEditingController> codeControllers = List.generate(
    6,
    (_) => TextEditingController(),
  );
  final RxBool isButtonEnabled = false.obs;
  final RxBool isSmsButtonEnabled = false.obs;
  final RxBool isLoading = false.obs;
  final RxBool isSmsError = false.obs;
  final RxBool canResendSms = false.obs;
  final RxInt resendTimer = 60.obs;
  Timer? _resendTimer;
  Timer? _tokenRefreshTimer;

  String? verificationId;
  int? resendToken;

  @override
  void onInit() {
    super.onInit();
    print('AuthController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    phoneController.addListener(_onPhoneChanged);
    for (var controller in codeControllers) {
      controller.addListener(_onCodeChanged);
    }
    startResendTimer();
    if (!Get.isRegistered<NotificationsController>()) {
      Get.put(NotificationsController());
    }
  }

  bool isValidPhoneNumber(String phone) {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    String cleanNumber = phone.replaceAll(RegExp(r'[^\d]'), '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞)
    if (cleanNumber.length != 11) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8
    if (!cleanNumber.startsWith('7') && !cleanNumber.startsWith('8')) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞ (–∫–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞) –æ—Ç 3 –¥–æ 9
    int operatorCode = int.parse(cleanNumber.substring(1, 2));
    if (operatorCode < 3 || operatorCode > 9) return false;
    
    return true;
  }

  void _onPhoneChanged() {
    final text = phoneController.text;
    bool isValid = isValidPhoneNumber(text);
    isButtonEnabled.value = text.length == 16 && isValid;
    print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω: $text');
    print('–ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: ${isButtonEnabled.value}');
    print('–ù–æ–º–µ—Ä –≤–∞–ª–∏–¥–Ω—ã–π: $isValid');
  }

  void _onCodeChanged() {
    final allFieldsFilled = codeControllers.every((controller) => 
      controller.text.isNotEmpty && int.tryParse(controller.text) != null);
    isSmsButtonEnabled.value = allFieldsFilled;
  }

  Future<void> onContinuePressed() async {
    if (isLoading.value) return;

    print('onContinuePressed –≤—ã–∑–≤–∞–Ω');
    try {
      isLoading.value = true;

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      String cleanNumber = phoneController.text.replaceAll(RegExp(r'[^\d]'), '');
      if (cleanNumber.startsWith('8')) {
        cleanNumber = '7' + cleanNumber.substring(1);
      } else if (!cleanNumber.startsWith('7')) {
        cleanNumber = '7' + cleanNumber;
      }
      if (cleanNumber.length != 11) {
        Get.snackbar(
          '–û—à–∏–±–∫–∞',
          '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX',
          snackPosition: SnackPosition.BOTTOM,
        );
        isLoading.value = false;
        return;
      }
      final phoneNumber = '+$cleanNumber';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
      if (!isValidPhoneNumber(phoneController.text)) {
        Get.snackbar(
          '–û—à–∏–±–∫–∞',
          '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
          snackPosition: SnackPosition.BOTTOM,
        );
        isLoading.value = false;
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Firebase
      await _auth.verifyPhoneNumber(
        phoneNumber: phoneNumber,
        verificationCompleted: (PhoneAuthCredential credential) async {
          print('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
          final userCredential = await _auth.signInWithCredential(credential);
          final user = userCredential.user;
          
          if (user != null) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            final shouldGoToProfileCreation = await _checkUserProfileWithRetry(user.uid);
            
            if (shouldGoToProfileCreation) {
              Get.offAll(() => CreatingProfileScreen());
              return;
            }
            
            // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            Get.offAll(() => BottomNavigation());
          }
        },
        verificationFailed: (FirebaseAuthException e) {
          print('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${e.message}');
          Get.snackbar(
            '–û—à–∏–±–∫–∞',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            snackPosition: SnackPosition.BOTTOM,
          );
          isLoading.value = false;
        },
        codeSent: (String vId, int? resendToken) {
          print('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. ID –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: $vId');
          verificationId = vId;
          this.resendToken = resendToken;
          isLoading.value = false;
          Get.to(() => SmsScreen());
        },
        codeAutoRetrievalTimeout: (String vId) {
          print('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ');
          verificationId = vId;
          isLoading.value = false;
        },
        timeout: const Duration(seconds: 60),
        forceResendingToken: resendToken,
      );

    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ verifyPhoneNumber: $e');
      Get.snackbar(
        '–û—à–∏–±–∫–∞',
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        snackPosition: SnackPosition.BOTTOM,
      );
      isLoading.value = false;
    }
  }

  Future<void> onSmsContinuePressed() async {
    if (!isSmsButtonEnabled.value || isLoading.value) return;

    try {
      isLoading.value = true;
      
      // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–¥ –∏–∑ –≤—Å–µ—Ö –ø–æ–ª–µ–π
      String smsCode = codeControllers.map((controller) => controller.text).join();
      
      if (verificationId == null) {
        throw Exception('ID –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –°–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      PhoneAuthCredential credential = PhoneAuthProvider.credential(
        verificationId: verificationId!,
        smsCode: smsCode,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ Firebase
      final userCredential = await _auth.signInWithCredential(credential);
      final user = userCredential.user;
      
      if (user != null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        final shouldGoToProfileCreation = await _checkUserProfileWithRetry(user.uid);
        
        if (shouldGoToProfileCreation) {
          Get.offAll(() => CreatingProfileScreen());
          return;
        }
        
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        Get.offAll(() => BottomNavigation());
      }
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMS: $e');
      isSmsError.value = true;
     
    } finally {
      isLoading.value = false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  Future<bool> _checkUserProfileWithRetry(String userId) async {
    int retryCount = 0;
    const maxRetries = 3;
    
    // –ñ–¥–µ–º 500–º—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Firebase Auth —Ç–æ–∫–µ–Ω–∞ —Å Firestore
    await Future.delayed(Duration(milliseconds: 500));
    
    while (retryCount < maxRetries) {
      try {
        final userDoc = await FirebaseFirestore.instance
            .collection('users')
            .doc(userId)
            .get();
            
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!userDoc.exists) {
          print('üìù –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
          return true; // –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        }
        
        final userData = userDoc.data() as Map<String, dynamic>?;
        if (userData == null ||
            userData['name'] == null ||
            userData['surname'] == null ||
            userData['name'].toString().trim().isEmpty ||
            userData['surname'].toString().trim().isEmpty) {
          print('üìù –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ø–æ–ª–Ω—ã–π, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
          return true; // –ù—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        }
        
        print('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω');
        return false; // –ü—Ä–æ—Ñ–∏–ª—å OK, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        
      } catch (e) {
        retryCount++;
        print('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ $retryCount –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É–¥–∞–ª–∞—Å—å: $e');
        
        if (e.toString().contains('permission-denied') && retryCount < maxRetries) {
          // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
          await Future.delayed(Duration(milliseconds: 1000 * retryCount));
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
          print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ $maxRetries –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å');
          return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        }
      }
    }
    
    return true; // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  }

  void startResendTimer() {
    canResendSms.value = false;
    resendTimer.value = 60;
    _resendTimer?.cancel();
    
    _resendTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (resendTimer.value > 0) {
        resendTimer.value--;
      } else {
        canResendSms.value = true;
        timer.cancel();
      }
    });
  }

  void resetVerificationState() {
    for (var controller in codeControllers) {
      controller.clear();
    }
    isLoading.value = false;
    isButtonEnabled.value = phoneController.text.length == 16 && isValidPhoneNumber(phoneController.text);
    startResendTimer();
  }

  void resendSms() {
    if (canResendSms.value) {
      onContinuePressed();
      startResendTimer();
    }
  }

  @override
  void onClose() {
    for (var controller in codeControllers) {
      controller.clear();
    }
    phoneController.dispose();
    for (var controller in codeControllers) {
      controller.dispose();
    }
    _resendTimer?.cancel();
    _tokenRefreshTimer?.cancel();
    super.onClose();
  }
}